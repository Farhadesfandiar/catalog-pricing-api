# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  App\Controller\:
    resource: '../src/Controller/'
    tags: ['controller.service_arguments']

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: "../src/"
    exclude:
      - "../src/DependencyInjection/"
      - "../src/Entity/"
      - "../src/Infrastructure/Doctrine/Entity/"
      - "../src/Kernel.php"
      - "../tests/"

  # Bind domain port to Doctrine adapter by default
  App\Domain\Product\ProductRepositoryInterface:
    alias: App\Infrastructure\Doctrine\Repository\DoctrineProductRepository

  # Depend on the interface across the app
  App\Domain\Discount\DiscountServiceInterface: '@App\Domain\Discount\DiscountService'

  # #Discount service wiring with rules
  # App\Domain\Discount\DiscountService:
  #   arguments:
  #     $rules:
  #       - '@App\Domain\Discount\CategoryDiscountRule'
  #       - '@App\Domain\Discount\SkuDiscountRule'
  
  # Make the parameters available to the factory
  App\Infrastructure\Discount\DiscountRulesFactory:
    arguments:
      $categoryPercents: '%discounts.categories%'
      $skuPercents: '%discounts.skus%'
  
  # Build the concrete DiscountService from the factory
  App\Domain\Discount\DiscountService:
    factory: ['@App\Infrastructure\Discount\DiscountRulesFactory', 'createService']



  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
